{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Timer.svelte"
  ],
  "sourcesContent": [
    "<script type=\"text/typescript\" lang=\"ts\">let sessionLength = 1; //25;\r\nlet breakLength = 2; //5;\r\nlet currentTime = 0;\r\nlet intervalMs = 1000; // 1 second\r\nlet timerInterval = null;\r\nlet sessionIsRunning = false;\r\nlet breakIsRunning = false;\r\n$: minutes = Math.floor(Number(currentTime / 60000)).toString();\r\n$: seconds = right(\"0\" + Number((currentTime % 60000) / 1000).toString(), 2);\r\n$: taskTimeMs = sessionLength * 60 * 1000;\r\n$: breakTimeMs = breakLength * 60 * 1000;\r\nfunction handleTimerTick() {\r\n    currentTime += intervalMs;\r\n    if ((sessionIsRunning && currentTime >= taskTimeMs)\r\n        || (breakIsRunning && currentTime >= breakTimeMs)) {\r\n        console.log(\"TIME REACHED\");\r\n        currentTime = 0;\r\n        if (sessionIsRunning) {\r\n            sessionIsRunning = false;\r\n            breakIsRunning = true;\r\n        }\r\n        else if (breakIsRunning) {\r\n            sessionIsRunning = true;\r\n            breakIsRunning = false;\r\n        }\r\n        else {\r\n            clearInterval(timerInterval); // Should never reach here\r\n        }\r\n        playBeep(5, 500);\r\n    }\r\n}\r\nfunction startClicked() {\r\n    sessionIsRunning = true;\r\n    breakIsRunning = false;\r\n    timerInterval = setInterval(handleTimerTick, intervalMs);\r\n    console.log(\"STARTED\");\r\n}\r\nfunction stopClicked() {\r\n    sessionIsRunning = false;\r\n    breakIsRunning = false;\r\n    clearInterval(timerInterval);\r\n    timerInterval = null;\r\n    console.log(\"STOPPED\");\r\n}\r\nfunction resetClicked() {\r\n    sessionIsRunning = false;\r\n    breakIsRunning = false;\r\n    clearInterval(timerInterval);\r\n    timerInterval = null;\r\n    currentTime = 0;\r\n    console.log(\"RESET\");\r\n}\r\nfunction right(s, len) {\r\n    let slen = s.length;\r\n    let last = slen;\r\n    let first = slen - len;\r\n    if (first < 0)\r\n        first = 0;\r\n    return s.substring(first, last);\r\n}\r\nfunction addAboveOne(num, add) {\r\n    return num + add >= 1 ? num + add : num;\r\n}\r\nfunction playBeep(times, intervalMs) {\r\n    let audio = new Audio('data:audio/wav;base64,UklGRl9vT19XQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YU' + Array(1e3).join(123));\r\n    let currentTime = 0;\r\n    let intRef = setInterval(function () {\r\n        currentTime++;\r\n        if (currentTime <= times) {\r\n            audio.play();\r\n        }\r\n        else {\r\n            clearInterval(intRef);\r\n        }\r\n    }, intervalMs);\r\n}\r\n</script>\r\n\r\n<style>\r\n    body {\r\n        background: #006;\r\n    }\r\n    .length-arrow {\r\n        font-size: 200%;\r\n        text-decoration: none;\r\n    }\r\n</style>\r\n\r\n<p>\r\n    Session Length: <a href=\"#\" class=\"length-arrow\" on:click|preventDefault={() => sessionLength = addAboveOne(sessionLength,1)}>&uarr;</a>\r\n    {sessionLength}\r\n    <a href=\"#\" class=\"length-arrow\" on:click|preventDefault={() => sessionLength = addAboveOne(sessionLength,-1)}>&darr;</a>\r\n</p>\r\n\r\n<p>\r\n    Break Length: <a href=\"#\" class=\"length-arrow\" on:click|preventDefault={() => breakLength = addAboveOne(breakLength,1)}>&uarr;</a>\r\n    {breakLength}\r\n    <a href=\"#\" class=\"length-arrow\" on:click|preventDefault={() => breakLength = addAboveOne(breakLength,-1)}>&darr;</a>\r\n</p>\r\n\r\n{#if sessionIsRunning}\r\nSession is running\r\n{:else if breakIsRunning}\r\nBreak time\r\n{:else}\r\nTimer has not been started\r\n{/if}\r\n\r\n<h1>Time: {minutes}:{seconds}</h1>\r\n\r\n<button on:click={startClicked} disabled=\"{timerInterval != null}\">Start</button>\r\n<button on:click={stopClicked} disabled=\"{timerInterval == null}\">Stop</button>\r\n<button on:click={resetClicked}>Reset</button>\r\n"
  ],
  "names": [],
  "mappings": "AAkFI,aAAa,eAAC,CAAC,AACX,SAAS,CAAE,IAAI,CACf,eAAe,CAAE,IAAI,AACzB,CAAC"
}